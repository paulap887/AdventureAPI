// <auto-generated />
using System;
using Adventure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Adventure.Data.Migrations
{
    [DbContext(typeof(AdventureDbContext))]
    [Migration("20220621115436_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Adventure.Core.Models.Adventure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Adventure");
                });

            modelBuilder.Entity("Adventure.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRootQuestion")
                        .HasColumnType("bit");

                    b.Property<int>("ParentChoice")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("ParentQuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Adventure.Core.Models.UserAdventure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("UserAdventure");
                });

            modelBuilder.Entity("Adventure.Core.Models.UserAdventureQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAdventureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserAdventureId");

                    b.ToTable("UserAdventureQuestion");
                });

            modelBuilder.Entity("Adventure.Core.Models.Question", b =>
                {
                    b.HasOne("Adventure.Core.Models.Adventure", "Adventure")
                        .WithMany("Questions")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Adventure.Core.Models.Question", "ParentQuestion")
                        .WithMany("Questions")
                        .HasForeignKey("ParentQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Adventure");

                    b.Navigation("ParentQuestion");
                });

            modelBuilder.Entity("Adventure.Core.Models.UserAdventure", b =>
                {
                    b.HasOne("Adventure.Core.Models.Adventure", "Adventure")
                        .WithMany("UserAdventures")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("Adventure.Core.Models.UserAdventureQuestion", b =>
                {
                    b.HasOne("Adventure.Core.Models.Question", "Question")
                        .WithMany("UserAdventureQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Adventure.Core.Models.UserAdventure", "UserAdventure")
                        .WithMany("UserAdventureQuestions")
                        .HasForeignKey("UserAdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserAdventure");
                });

            modelBuilder.Entity("Adventure.Core.Models.Adventure", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAdventures");
                });

            modelBuilder.Entity("Adventure.Core.Models.Question", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAdventureQuestions");
                });

            modelBuilder.Entity("Adventure.Core.Models.UserAdventure", b =>
                {
                    b.Navigation("UserAdventureQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
