<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Adventure.Api</name>
    </assembly>
    <members>
        <member name="T:Adventure.Api.Controllers.AdventureController">
            <summary>
            Adventure Controller
            </summary>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.#ctor(Adventure.Core.Services.IAdventureService,AutoMapper.IMapper)">
            <summary>
            Constructor 
            </summary>
            <param name="adventureService"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.GetAdventureById(System.Int32)">
            <summary>
             Get Adventure By Id 
            </summary>
            <param name="adventureId">adventureId</param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.GetAllAvailableChoices">
            <summary>
             Get All Available Choices 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.CreateNewAdventure(Adventure.Api.Resources.AdventureResource)">
            <summary>
             Create New Adventure - First API to call While creating new Adventure 
             Response - Entire Adventure Model including questions 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.CreateUpdateQuestion(Adventure.Api.Resources.AdventureQuestionUpdateResource)">
            <summary>
             Update Adventure / Questions  - After posting Adventure API, call this PUT API for updating questions for Adventure 
             Response - Entire Adventure Model including questions 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.AdventureController.GetAdventureDetail(System.Int32)">
            <summary>
             Common method for getting details of adventure 
            </summary>
            <param name="adventureId"></param>
            <returns></returns>
        </member>
        <member name="T:Adventure.Api.Controllers.UserAdventureController">
            <summary>
             User Adventure
            </summary>
        </member>
        <member name="M:Adventure.Api.Controllers.UserAdventureController.#ctor(Adventure.Core.Services.IUserAdventureService,AutoMapper.IMapper)">
            <summary>
            Constructor
            </summary>
            <param name="covidService"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Adventure.Api.Controllers.UserAdventureController.CreateNewUserAdventure(Adventure.Api.Resources.UserAdventure.UserAdventureRequestResource)">
            <summary>
             First API to call for creating new Adventure capturing for a User
             Response -  Root (First) Question in case of New User Adventure Creation 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.UserAdventureController.CaptureUserChoices(Adventure.Api.Resources.UserAdventureQuestionCaptureResource)">
            <summary>
             After the Creation this API will be called to capture the choices for rest of Questions 
             inside Adventure
             Response -  Next Consecutive  Question, If reaches end then  "isEndReached" will be set to true 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.UserAdventureController.GetUserAdventures(System.Int32)">
            <summary>
             Get All Adventure completed by particular user 
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Adventure.Api.Controllers.UserAdventureController.GetUserAdventureById(System.Int32)">
            <summary>
             Get User Adenture details Completed by UserAdventureId 
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Adventure.Api.Filter.ExceptionFilter">
            <summary>
            Exception Filter
            </summary>
        </member>
        <member name="M:Adventure.Api.Filter.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            On Exception (Handler)
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Adventure.Api.Mapping.MappingProfile">
            <summary>
             Mappings 
            </summary>
        </member>
        <member name="M:Adventure.Api.Mapping.MappingProfile.#ctor">
            <summary>
             Mappings 
            </summary>
        </member>
        <member name="T:Adventure.Api.Mapping.UserAdventureMappingProfile">
            <summary>
            UserAdventureMappingProfile
            </summary>
        </member>
        <member name="M:Adventure.Api.Mapping.UserAdventureMappingProfile.#ctor">
            <summary>
            UserAdventureMappingProfile
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.AdventureQuestionUpdateResource">
            <summary>
            AdventureQuestionUpdateResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.AdventureResource">
            <summary>
            AdventureResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.UserAdventureQuestionCaptureResource">
            <summary>
            UserAdventureQuestionCaptureResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.UserAdventure.UserAdventureRequestResource">
            <summary>
            UserAdventureRequestResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.AdventureQuestionResource">
            <summary>
            AdventureQuestionResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.UserAdventureNextQuestionResource">
            <summary>
            UserAdventureNextQuestionResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.UserAdventureQuestionResource">
            <summary>
            UserAdventureQuestionResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.UserAdventureResource">
            <summary>
            UserAdventureResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Resources.ChoiceResource">
            <summary>
            ChoiceResource
            </summary>
        </member>
        <member name="T:Adventure.Api.Validator.RequiredNotEmptyAttribute">
            <summary>
            Required Not Empty Attribute
            </summary>
        </member>
        <member name="M:Adventure.Api.Validator.RequiredNotEmptyAttribute.IsValid(System.Object)">
            <summary>
            Is Valid Check 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
